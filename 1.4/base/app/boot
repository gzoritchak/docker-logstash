#!/bin/bash

# Fail fast, including pipelines
set -eo pipefail

source /app/variables.sh
source /app/elasticsearch.sh


# Replace ES_HOST and ES_PORT in your logstash.conf file
# if they exist with the IP and port dynamically generated
# by docker.
#
# Note: Don't use this on a file mounting using a docker
# volume, as the inode switch will cause `device or resource busy`
# Instead download your file as normal
#
function logstash_sanitize_config() {
    local embedded="$(es_embedded)"
    local host="$(es_host)"
    local port="$(es_port)"
    local protocol="$(es_protocol)"

    echo "embedded:: ${embedded}"

    sed -e "s/ES_EMBEDDED/${embedded}/g" \
        -e "s/ES_PROTOCOL/${protocol}/g" \
        -e "s/ES_HOST/${host}/g" \
        -e "s/ES_PORT/${port}/g" \
        -i "$LOGSTASH_CONFIG_FILE"
}

function kibana_sanitize_config() {
    local host="$(es_host)"
    local port="$(es_port)"
    local protocol="$(es_protocol)"

    sed -e "s/http/${protocol}/g" \
        -e "s/\"+window.location.hostname+\"/${host}/g" \
        -e "s/9200/${port}/g" \
        -i "$KIBANA_CONFIG_FILE"
}

function logstash_create_log_dir() {
    local log_dir="$LOGSTASH_LOG_DIR"

    if ! mkdir -p "${log_dir}" ; then
        echo "Unable to create ${log_dir}" >&2
    fi
}

function logstash_start_agent() {
    local config_dir="$LOGSTASH_CONFIG_DIR"
    local log_file="$LOGSTASH_LOG_FILE"

    exec "$LOGSTASH_BINARY" \
         agent \
         --config "$config_dir" \
         --log "$log_file" \
         -- \
         web
}

function main() {
    logstash_sanitize_config
    kibana_sanitize_config
    es_script_disable_dynamic
    logstash_create_log_dir

    # Fire up logstash!
    #
    logstash_start_agent
}

main "$@"
